/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Program Name: Patchworks (C)                                                                                            //
// Author: Jeffrey Bednar                                                                                                  //
// Copyright (c) Illusion Interactive, 2011 - 2025.                                                                        //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "Headers/fixed_point.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline fixed16_t toFixed(int32_t value, uint8_t shift) {
  return value << shift;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline int32_t fromFixed(fixed16_t value, uint8_t shift) {
  return value >> shift;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline fixed16_t fixedMultiply(fixed16_t a, fixed16_t b, uint8_t shift) {
  // Upscale to avoid truncating.
  return (fixed16_t)(((int64_t)a * b) >> shift);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline fixed16_t fixedDivide(fixed16_t a, fixed16_t b, uint8_t shift) {
  // Upscale to avoid truncating.
  return (fixed16_t)(((int64_t)a << shift) / b);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline fixed16_t extractComponentAsFixed(fixed16_t value, uint8_t shift) {
  return (value >> shift) << shift;
  //return value & ~(value - 1);  // Subtract for 0xFF... invert and mask.
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline uint32_t extractFractionalAsNatural(fixed16_t value, uint8_t shift) {
  return (uint32_t)value & ((1U << shift) - 1);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline float fixedToFloat(fixed16_t value, uint8_t shift) {
  return (float)value / (1 << shift);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline fixed16_t fixedLog(fixed16_t value, uint8_t shift) {
  // Approximate/look up table with interpolation.
  return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
